package test.test1;

public class Solution {

	public static void main(String args[]) {
		Solution sol = new Solution();
		
		System.out.println(sol.naiveDivide(10,6));
		System.out.println(sol.optimalDivide(10,6));
		System.out.println(sol.Add(10,6));
		System.out.println(sol.subtract(10,6));
		System.out.println(sol.power(5,2));
		
	}
	
	
	int Add(int x, int y){
		if (y == 0)
			return x;
		else
			return Add( x ^ y, (x & y) << 1);
	}
	
	int subtract(int x, int y){
	    if (y == 0)
	        return x;
	    return subtract(x ^ y, (~x & y) << 1);
	}
	
	 boolean isPowerOfTwo (int x){
	        return x!=0 && ((x&(x-1)) == 0);     
	    }
	     
	 
	 public int power(int x, int y) {
		    int result = 1;
		    long power = y;
		    if (y < 0) {
		      power = -power;
		      x = 1 / x;
		    }
		    while (power != 0) {
		      if ((power & 1) != 0) {
		        result *= x;
		      }
		      x *= x;
		      power >>>= 1;
		
		    }
		    return result;
		  }
	
	 
		public int naiveDivide(int divident, int divisor) {
			int quotient =0;
			
			while(divident >= divisor) {
				divident = divident-divisor;
				quotient++;
			}		
			return quotient;
		}
	 
	int optimalDivide(int numerator, int denominator) { 
		int mask = 1; 
		int quotient = 0; 

		while (denominator <= numerator) { 
		denominator <<= 1; 
		mask <<= 1; 
		} 

		while (mask > 1) { 
		denominator >>= 1; 
		mask >>= 1; 
		if (numerator >= denominator) { 
		numerator -= denominator; 
		quotient |= mask; 
		} 
		} 

		return quotient; 
		}
		
		int right(int x, int pos) {
		return (x >> pos)&1;
	}
	private int add(int x, int y) {
		while(y!=0) {
			int carry = x &y;
			x = x^y;
			y = carry <<1;
		}
		
		return x;
		
	}
	
	private int power(int x, int y) {
		if(y==0) return x;
		int result = 1;
		for(int i =0; i <y; i++) {
			result = mul(result, x); 
		}
		return result;
	}

	private int mul(int i, int j) {
		int result =0;
		while(j!=0) {
			if((j&1) !=0) {
				result +=i;
			}
			i = i<<1;
			j = j>>1;
		}
		return result;
	}
	
    public int divide(int p, int q) {
        long dividend = (long)p;
        long divisor = (long)q;
        int result = 0;
        int mask = 1;
        if(divisor == 0)
            return Integer.MAX_VALUE;
        if(divisor == 1)
            return (int)dividend;
        while(divisor < dividend){
            divisor = divisor << 1;
            mask = mask << 1;
        }
        do{
            if(dividend >= divisor){
                dividend = dividend - divisor;
                result = result + mask;
            }
            divisor = divisor >> 1;
            mask = mask >> 1;               
        }while(mask != 0);
        
        if (dividend == Integer.MIN_VALUE && divisor == -1)
            return Integer.MAX_VALUE;
            
        if ((dividend > 0 && divisor > 0) || (dividend < 0 && divisor < 0))
            return result;
        else
            return -result;
   
}
    
    private String reverseBinary(int x) { 	
    		int b=0;
        while (x!=0){
        	 b<<=1;
            b|=(x&1);
            x>>=1;        
        }
        System.out.println(b);
        return Integer.toBinaryString(b);
    }
    
    
}
